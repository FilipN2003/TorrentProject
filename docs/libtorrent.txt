
-Objasnjenje libtorrent-a

-pokretanje:
    - g++ -std=c++17 2.cpp -o 2 -ltorrent-rasterbar           kompajliranje
    - ./1 ubuntu-25.04-desktop-amd64.iso.torrent
    - ./2 ubuntu-25.04-desktop-amd64.iso.torrent ubuntu-24.04-desktop-amd64.iso.torrent     izvrsavanje
    - link odakle sam skinuo ove .torrent fajlove    https://ubuntu.com/download/alternative-downloads
    - moj fajl se zove 2.cpp


-parsiranje i ucitavanje
    - prvo koristimo namespace lt = libtorrent kao skracenicu
    - .torrent fajl moramo da citamo kao binarnu formu a ne kao tekst jer zelimo da procitamo bas sve bez preskakanja (.torrent fajlovi, slike, videi itd se citaju ovako)
    - procitano se smesta u neki vektor charova. Kljucne stvari su lt::span<const char>, lt::bdecode_node i lt::torrent_info
    - lt::span<const char> span_buffer - je pogled na vektor u koji smo smestili ono sto smo procitali. To je dakle neki objekat koji samo "gleda" podatke iz buffera ali nije njegova kopija. U sustini nije toliko bitno, span se koristi za funkciju za koju ce biti reci u narednim redovima
    - lt::bdecode_node node - ovde smestamo povratnu vrednost f-je bdecode kojoj prosledjujemo span odnosno pogled na onaj vektor i objekat koji sluzi za hvatanje gresaka... bdecode funkcija pretvara bajtove u hijerarhijsku stukturu slicnu json-u
    - lt::torrent_info t_info - ovo je objekat koji kreiramo uz pomoc node-a (prethodni red) i objekta za hvatanje gresaka(ec), ovo je objekat koji sadrzi informacije tipa ime,velicinu fajla, broj delova,velicinu dela...
    - lt::error_code ec - objekat za hvatanje gresaka

    - Ukratko, citamo .torrent fajl u binarnoj formi, smestamo ga u neki vektor, parsiramo i na kraju dobijamo objekat cijim poljima mozemo da pristupamo da ih ispisujemo itd
    - Ta polja su npr name(), total_size(), piece_length(), num_files(), info_hashes(), num_pieces()....


-pokretanje sesije i dodavanje torenta
    - lt::sesions ses - ovo je najvazniji objekat za ovaj projekat, njemu prosledjumo settings_pack objekat koji je na podrazumevanom modu (nisam istrazio kako se menja i sta tacno moze da se promeni)
    - lt::add_torrent_parametars - ovo je objekat koji sadrzi informacije za pokretanje torrenta
    - u polje atp.ti - smestano deljeni pokazivac na t_info objekat koji je zapravo ono sto smo parsirali
    - u polje atp.save_path - dodeljujemo lokaciju gde zelimo da se skinuti fajl nadje npr . odnosno trenutni dir
    - handle je objekat klase torrent_handle i njemu dodeljujemo ses.add_torrent(atp) odnosno torrent koji smo prethodno parsirali. Promenljiva handle se dalje koristi za kontrolu torenta, pauziranje...
    - handle ima polja status, pause, resume ...


    - u for petlji pristupamo statusu koji je polje objekta handle i ispisujemo zeljenje informacije, kada se torent skine, a to proveravamo sa status.is_seeding, izlazimo iz besk petlje i zavrsavamo program


-skidanje vise torenta odjednom
    - u fajlu 2.cpp(samo preskocite ovo sto je zakomentarisano to je od ranije)
    - Jednostavan koncept sa ovom bibliotekom. Kao argumente komandne linije mozemo da unosimo imena .torrent fajlova i pravimo vektor handle-ova(std::vector<lt::torrent_handle> handles).
    - u petlji koja ide od 1 do argc(nulti indeks je ./a.out) radimo sve sto smo radili i ranije sa jednim .torrent fajlom. Citamo, pravimo buffer, span itd i na kraju dobijamo handle kome dodeljumo ses.add_torrent(atp) i taj handle pusujemo u vektor handles.
    - kasnije imamo beskonacnu for petlju gde prolazimo sve handle-ove u vektoru handles i ispisujemo informacije uz pomoc statusa
    - ovaj program koji sam otkucao je sekvencijalan ali se zapravo izvrsava paralelno i o tome se brine libtorrent biblioteka.


-pauziranje
    - u fajlu 1.cpp
    - Imamo dve niti. Glavnu, u kojoj se skida torent fajl, i kreiramo novu nit, koja moze da pauzira i odpauzira skidanje i da prekine program.
    - Pravimo funkciju koja nema povratnu vrednost i prima pokazivac na handle objekat. U ovoj funkciji se unosi p,r ili q za razlicite akcije
    - koristimo atomic fleg da bismo mogli da mu pristupamo iz vise niti
    - u mainu se prosledjuje nit koja prima funkciju koju smo napravili i referencu na handle objekat(bitno je da to bude bas taj handle koji obradjuje torent a ne kopija)
    - funkcija koju izvrsava nit stalno radi dokle god exit_flag ne postane trenutni
    - bitno je da imamo dve niti jer bi inace program cekao da mi unesemo neko slovo recimo p i ne bi mogao da nastavi sa skidanjem ovako program radi svoje, a mi istovremeno mozemo da unosimo komande tako sto ih samo otkucamo sa p enter npr
    